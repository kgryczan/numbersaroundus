---
title: "The Data Team That Teaches Together"
author: "Numbers around us"
date: "2025-04-24"
format: html
---

![](images/Sharing%20knowledge.jpg)

## **I Gave My First Webinar—And Something Clicked**

Not long ago, I gave my first [webinar](https://youtu.be/0Ko9O2-kvTA?si=_aJCI2jaHDvilrVR). It was a session on **introducing R to Excel users**—a light technical demo, some live examples, a few “aha” moments.

I expected it to feel like a tutorial. What I didn’t expect was how much it would **shift the way I think about working in data**.

Something happens when you stop just *doing* the work and start **explaining** it—especially to people outside your usual toolset. In this case, I was presenting R to a group more comfortable in Excel. Different language, different rhythm. But once we connected a few dots—from tidyverse to pivot tables, from reproducibility to automation—I could see it land.

What started as a knowledge transfer turned into **a mindset shift**—for them and for me.

That’s when it hit me:\
In today’s data teams, **sharing what you know is no longer a side project—it’s part of the job**. And more than that, it’s part of **how teams grow, adapt, and evolve.**

This article is about that realization—how **teaching, mentoring, and building knowledge-sharing habits** can turn individuals into communities, and work into movement.

## **The Myth of the Lone Genius (and the Cost of Hoarding Knowledge)**

In the early days of any career in data, it’s easy to believe that success comes from **knowing more than others**. Becoming the one person who understands that messy model, cracked that SQL puzzle, or finally got the BI tool to cooperate.

It’s a seductive idea: the **lone genius**—headphones on, solving the hard stuff solo, irreplaceable because no one else can do what they do.

But here's the quiet truth most experienced teams know:\
That kind of knowledge is powerful... **until it's a liability.**

Because when knowledge is hoarded, it becomes **fragile**.

-   The person who built the pipeline leaves, and **no one knows how to maintain it**.

-   The model gets better, but **no one understands why it changed**.

-   The script works, but **only its author knows what all those cryptic variable names mean**.

Silos don’t scale.\
They slow teams down, **break onboarding**, and turn every project into a guessing game. And in a field where tools evolve monthly and teams shift constantly, **what’s not shared gets lost fast.**

Even worse? **It breeds fear.** People hesitate to experiment or contribute because they’re afraid of stepping on undocumented logic or sacred ground.

Knowledge hoarding used to feel like job security.\
Now, it’s more like **technical debt** in human form.

Modern data work thrives not on solitary brilliance, but on **shared understanding**—what some might call **open-source knowledge culture, applied internally**. It’s not just about writing code that works. It’s about writing code (and thoughts, and workflows) that **others can work with**.

## **Teaching as a Superpower (Even if You’re Not the Expert)**

There’s a quiet magic that happens the moment you try to explain something.

It doesn’t matter if it’s in a webinar, a documentation page, a diagram drawn on a whiteboard, or just an offhand “oh by the way…” in a team meeting—**the act of teaching reveals the gaps in your own understanding.**

And that’s not a weakness. That’s the power.

Most people think you need to be **an expert before you teach.** But in reality, **teaching is what makes you an expert.**

-   It forces you to untangle your own shortcuts.

-   t pushes you to make the implicit explicit.

-   It transforms instinct into something structured, repeatable, and shareable.

When I was preparing the R webinar for Excel users, I found myself **reframing concepts I took for granted.** Why do we use pipes? Why do we care about reproducibility? What makes `mutate()` intuitive once you “get it,” but weird at first glance?

The session was for them—but **the prep was for me**. And I left it with **more clarity about my own tools** than I’d had going in.

That’s the quiet return on investment when you teach in a data team. You’re not just adding value for others—you’re **refining your own fluency**.

And it doesn’t need to be a full-blown presentation. Some of the most impactful knowledge-sharing happens in:

-   a five-minute screen share

-   a comment in a pull request

-   a “here’s what I learned today” Teams or email thread

-   an ugly-but-honest wiki page

When knowledge is **shared in motion**, it spreads without formality or friction.

And when everyone on a team feels **just a little responsible for teaching**, something amazing happens:\
**The team starts teaching itself.**

## **Internal Communities & Mentorship—The Real Engines of Team Learning**

While teaching moments can happen spontaneously, **teams grow faster when learning is intentional.** This is where **internal communities and mentorship structures** come into play—not as corporate formalities, but as real engines for **scaling knowledge without bottlenecks.**

#### **💬 Internal Topic Communities: Your In-House Open Source**

Think of these as **guilds, squads, or circles**—organic spaces where people with a shared interest gather around a common tool, problem, or practice:

-   An **R community** that swaps packages, patterns, and ggplot quirks.

-   A **dbt guild** that aligns on model conventions and reviews PRs together.

-   A **“data storytelling” circle** where analysts share how they’re communicating findings in dashboards or decks.

These groups aren’t about hierarchy or performance—they’re about **peer-to-peer learning and shared curiosity.**\
They create **psychological safety** for asking “dumb” questions (which are usually the smartest ones) and **turn quiet team members into visible contributors**.

In a way, they replicate the spirit of **open-source communities**—except the audience is internal. You’re not building for the world, but **you are building for each other**. And that makes the knowledge **stickier, faster, and more aligned with the organization’s real challenges.**

#### **🧭 Mentorship: The Knowledge Shortcut We All Need**

Formal or informal, mentorship is a **force multiplier** in data teams.

The best mentors aren’t just technical powerhouses—they’re **navigators.**\
They help you:\
✅ Understand how the team thinks\
✅ Spot patterns in the chaos\
✅ Avoid reinventing the wheel

And just as importantly, they show you **how to share back what you learn.**

Mentorship creates **a chain reaction of learning**:

-   A mid-level analyst mentors a junior on query optimization.

-   That junior later explains the same concept to a new hire.

-   Now the team has **two people teaching** what used to live in one person’s head.

Multiply that by a few topics, and suddenly you’ve got **distributed resilience**—not just expertise in isolated nodes.

Mentorship doesn’t have to mean long-term pairings or formal programs. It can be as simple as:

-   “I’ve done this before—want to pair on it?”

-   “Here’s a doc I wish someone had shown me earlier.”

-   “Let me know if you want feedback—I made that mistake last quarter.”

**When internal communities and mentorship become the norm, your data team stops relying on tribal knowledge—and starts operating like a living, breathing learning system.**

## **Be the Teammate You Needed a Year Ago**

When we think of “impact” in data, we usually think in numbers: pipelines deployed, dashboards launched, models shipped, insights delivered.

But here’s a quieter metric—harder to measure, but just as important:\
**How much knowledge did you leave behind for others to build on?**

Being generous with what you know—whether it’s through a webinar, a how-to note, or a Slack message that starts with “not sure if this helps but…”—isn’t a distraction from the work. **It is the work.**

When you take time to teach, you’re not just helping someone else catch up.\
You’re also:

-   Reinforcing your own learning

-   Documenting the “why,” not just the “how”

-   Making your future self’s job easier

-   Contributing to a culture where **nobody has to start from zero**

In a field as fast-moving and fragmented as data, **knowledge-sharing is the most sustainable form of velocity.**

You don’t need to be a principal engineer or a staff-level scientist to have something worth sharing.\
You just need to be **one step ahead of someone else—and willing to turn around and say, “Here’s what I learned.”**

So here’s a final thought:\
Be the teammate you needed a year ago.\
Or six months ago.\
Or yesterday.

Because in the end, the best data teams aren’t just smart.\
They’re **generous.**
