---
title: "Shiny and Beyond: Mastering Interactive Web Applications with R and Appsilon Packages"
author: "Numbers around us"
date: "2024-05-16"
format: html
---

# Shiny and Beyond: Mastering Interactive Web Applications with R and Appsilon Packages

![Shiny and Beyond](images/shiny-webapp.jpg)

## Introduction to Shiny and Interactive Web Applications

In today's data-driven world, the ability to create dynamic, interactive web applications is a highly valuable skill. Shiny, a package developed by RStudio, provides an elegant framework for building such applications using R. It enables data scientists and analysts to transform their analyses into interactive experiences, making data insights accessible and engaging. This article series will guide you through mastering Shiny, starting with the basics and gradually introducing more advanced concepts and tools, including powerful packages from Appsilon that enhance Shiny's capabilities.

## Purpose and Benefits of Shiny

Shiny allows you to turn your R scripts into interactive web applications effortlessly. Whether you're looking to create simple data visualizations or complex, multi-page applications, Shiny offers the flexibility and power needed to meet your objectives. Some key benefits include:

1.  **Ease of Use**: Shiny's syntax is intuitive, and if you are familiar with R, you can quickly start building applications.
2.  **Interactive Data Exploration**: Users can interact with data visualizations, filtering and modifying parameters in real-time to uncover insights.
3.  **Rapid Prototyping**: Shiny allows for quick development and iteration, making it perfect for prototyping data products.
4.  **Integration with R**: Leverage the full power of R, including its extensive library of packages for data manipulation, visualization, and analysis.

## Getting Started with Shiny

Before diving into creating your first Shiny application, ensure you have R and RStudio installed. Additionally, you'll need to install the Shiny package if you haven't already. Here's how to set up your environment:

``` r
install.packages("shiny", repos = "https://cloud.r-project.org")
```

## Basic Structure of a Shiny App

A Shiny application consists of two main components:

1.  **UI (User Interface)**: Defines the layout and appearance of your app.
2.  **Server**: Contains the logic that runs behind the scenes, processing inputs and generating outputs.

Let's create a simple Shiny app to demonstrate these components. The following code defines a basic app that allows users to interact with a dataset and visualize its contents.

## Your First Simple App

We'll create an app that displays the famous `mtcars` dataset. Users can select variables to plot and see the relationship between them.

``` r
library(shiny)

# Define the UI
ui <- fluidPage(
  titlePanel("Mtcars Dataset Explorer"),
  sidebarLayout(
    sidebarPanel(
      selectInput("xvar", "X-axis variable", choices = names(mtcars)),
      selectInput("yvar", "Y-axis variable", choices = names(mtcars), selected = "mpg")
    ),
    mainPanel(
      plotOutput("scatterPlot")
    )
  )
)

# Define the server logic
server <- function(input, output) {
  output$scatterPlot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      labs(title = paste("Scatter plot of", input$xvar, "vs", input$yvar))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Mtcars Scatter Plot](https://cdn-images-1.medium.com/max/800/1*yTRJWl--clZaBIGLJDR2Fg.png)

This simple example demonstrates the basic structure of a Shiny app, showcasing how user inputs can dynamically influence the output. With this foundation, we are ready to explore more advanced features and customizations in the next chapters, including leveraging powerful Appsilon packages to enhance our Shiny applications.

## Exploring the Capabilities of "vanilla" Shiny

Before we dive into the powerful enhancements offered by Appsilon packages, it's essential to thoroughly understand the capabilities of "vanilla" Shiny. This chapter will explore what Shiny can do out of the box, including its core features, customization options, and how it facilitates interactive data exploration. By mastering these foundational aspects, you will be well-prepared to leverage additional tools to create even more sophisticated applications.

## Core Features of Vanilla Shiny

Vanilla Shiny provides a robust framework for building interactive web applications directly from R. Its key features include:

1.  **Interactive Widgets**: Shiny offers a variety of input controls like sliders, dropdowns, text inputs, and date selectors. These widgets allow users to interact with your data and analyses dynamically.
2.  **Reactive Programming**: At the heart of Shiny is its reactivity system, which ensures that the output updates automatically whenever the inputs change. This reactive model simplifies the development of interactive applications.
3.  **Dynamic User Interfaces**: Shiny allows you to create UIs that change dynamically in response to user inputs. This enables the development of more interactive and responsive applications.
4.  **Seamless Integration with R**: Since Shiny is built for R, you can use any R package within your Shiny apps. This includes popular packages for data manipulation (dplyr), visualization (ggplot2), and machine learning (caret).
5.  **Extensibility**: Shiny applications can be extended with custom HTML, CSS, and JavaScript, allowing for more advanced customization and functionality.

## Exploring Interactive Widgets

Shiny provides a rich set of input controls that you can use to create interactive applications. Here are some commonly used widgets:

-   **Slider Input**: Allows users to select a range of values.

``` r
sliderInput("obs", "Number of observations:", min = 1, max = 1000, value = 500)
```

-   **Select Input**: Provides a dropdown menu for users to select from a list of options.

``` r
selectInput("var", "Variable:", choices = names(mtcars))
```

-   **Text Input**: Allows users to enter text.

``` r
textInput("caption", "Caption:", "Data Summary")
```

-   **Date Input**: Allows users to select a date.

``` r
dateInput("date", "Date:", value = Sys.Date())
```

These widgets can be combined to create a rich user interface for your applications.

## Understanding Reactivity

Reactivity is a core concept in Shiny that makes it easy to build interactive applications. Reactive expressions and observers automatically update outputs when their inputs change.

-   **Reactive Expressions**: Functions that return a value and automatically re-execute when their dependencies change.

``` r
reactiveExpression <- reactive({
  input$sliderValue * 2
})
```

-   **Observers**: Functions that perform actions rather than returning values, and automatically re-execute when their dependencies change.

``` r
observe({
  print(input$sliderValue)
})
```

Here's an example demonstrating reactivity:

``` r
library(shiny)

# Define the UI
ui <- fluidPage(
  titlePanel("Reactive Example"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("num", "Number of observations:", 1, 100, 50)
    ),
    mainPanel(
      textOutput("value"),
      plotOutput("histPlot")
    )
  )
)

# Define the server logic
server <- function(input, output) {
  output$value <- renderText({
    paste("You selected", input$num, "observations")
  })

  output$histPlot <- renderPlot({
    hist(rnorm(input$num))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Reactive Example](https://cdn-images-1.medium.com/max/800/1*krz7Do3g2NSsvDPDCyIRCw.png)

In this example:

-   The text output (`output$value`) and the plot output (`output$histPlot`) are both reactive, updating automatically when the slider input (`input$num`) changes.

## Customizing the UI with HTML and CSS

While Shiny's built-in functions are powerful, you may sometimes need more control over the UI's appearance and behavior. Shiny allows you to use custom HTML and CSS for further customization.

Here's an example of incorporating custom HTML and CSS:

``` r
library(shiny)

# Define the UI
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      body { background-color: #f7f7f7; }
      h1 { color: #2c3e50; }
      .well { background-color: #ecf0f1; }
    "))
  ),
  titlePanel("Custom Styled App"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("num", "Number of observations:", 1, 100, 50)
    ),
    mainPanel(
      plotOutput("histPlot")
    )
  )
)

# Define the server logic
server <- function(input, output) {
  output$histPlot <- renderPlot({
    hist(rnorm(input$num))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Custom Styled App](https://cdn-images-1.medium.com/max/800/1*yGzDrsKDmnpKwAfA-aI7JQ.png)

In this example:

-   We used `tags$head` and `tags$style` to include custom CSS directly in the Shiny app.
-   The background color, header color, and well panel color have been customized using CSS.

## Extending Shiny with JavaScript

For even more advanced interactivity and functionality, you can extend Shiny applications with custom JavaScript. Shiny provides hooks for integrating JavaScript code, allowing you to add custom behavior to your apps.

Here's an example of adding a custom JavaScript alert when a button is clicked:

``` r
library(shiny)

# Define the UI
ui <- fluidPage(
  titlePanel("JavaScript Integration"),
  sidebarLayout(
    sidebarPanel(
      actionButton("alertButton", "Show Alert")
    ),
    mainPanel(
      plotOutput("histPlot")
    )
  ),
  tags$script(HTML("
    $(document).on('click', '#alertButton', function() {
      alert('Button clicked!');
    });
  "))
)

# Define the server logic
server <- function(input, output) {
  output$histPlot <- renderPlot({
    hist(rnorm(100))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![JavaScript Integration](https://cdn-images-1.medium.com/max/800/1*0zdSyi0Ay9MzH3VIVr2hew.png)

In this example:

-   We used `tags$script` to include custom JavaScript directly in the Shiny app.
-   A JavaScript alert is displayed when the button is clicked.

By mastering these core features and customization options, you can create powerful and engaging Shiny applications. In the next chapter, we will explore how to enhance these applications further with Appsilon's styling packages, adding even more capabilities and visual appeal to your Shiny projects.

## UI Design with Appsilon's Styling Packages

The user interface (UI) is a critical aspect of any web application, as it determines how users interact with your app and how accessible and engaging it is. In Shiny, the default UI components are functional but can sometimes look plain and lack the polish needed for professional applications. This is where Appsilon's styling packages come in. By using `shiny.semantic`, `shiny.fluent`, and `semantic.dashboard`, you can create visually appealing and highly interactive UIs that stand out.

## Using `shiny.semantic` for Elegant UIs

`shiny.semantic` allows you to use Semantic UI, a front-end framework that provides a wide range of theming options and UI components, within your Shiny applications. This integration helps you create modern, responsive, and user-friendly interfaces without needing extensive knowledge of HTML or CSS.

To start using `shiny.semantic`, you'll first need to install and load the package:

``` r
install.packages("shiny.semantic", repos = "https://cloud.r-project.org")
library(shiny.semantic)
```

Let's enhance our previous `mtcars` app with `shiny.semantic` to give it a more modern look:

``` r
library(shiny)
library(shiny.semantic)
library(ggplot2)

# Define the UI with shiny.semantic
ui <- semanticPage(
  title = "Mtcars Dataset Explorer",
  segment(
    title = "Mtcars Dataset Explorer",
    sidebar_layout(
      sidebar_panel(
        selectInput("xvar", "X-axis variable", choices = names(mtcars)),
        selectInput("yvar", "Y-axis variable", choices = names(mtcars), selected = "mpg")
      ),
      main_panel(
        plotOutput("scatterPlot")
      )
    )
  )
)

# Define the server logic
server <- function(input, output) {
  output$scatterPlot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      labs(title = paste("Scatter plot of", input$xvar, "vs", input$yvar))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Enhanced Mtcars App](https://cdn-images-1.medium.com/max/800/1*2R142wpESjfdnLA1tisxiQ.png)

In this enhanced version:

-   We replaced `fluidPage` with `semanticPage` to utilize Semantic UI.
-   We used `segment` and `sidebar_layout` to structure the UI components.
-   The overall look is more modern and visually appealing compared to the default Shiny components.

## Building Dashboards with `semantic.dashboard`

For more complex applications that require a dashboard layout, `semantic.dashboard` offers powerful tools to create sophisticated dashboards with ease. It extends `shiny.semantic` and adds pre-styled dashboard components.

Here's an example of a dashboard layout for our `mtcars` app:

``` r
library(shiny)
library(semantic.dashboard)
library(ggplot2)

# Define the UI with semantic.dashboard
ui <- dashboardPage(
  dashboardHeader(title = "Mtcars Dashboard"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
      menuItem("Data Explorer", tabName = "dataexplorer", icon = icon("table"))
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "dashboard",
              fluidRow(
                box(title = "Controls", width = 4, 
                    selectInput("xvar", "X-axis variable", choices = names(mtcars)),
                    selectInput("yvar", "Y-axis variable", choices = names(mtcars), selected = "mpg")
                ),
                box(title = "Scatter Plot", width = 8, plotOutput("scatterPlot"))
              )
      ),
      tabItem(tabName = "dataexplorer",
              dataTableOutput("dataTable")
      )
    )
  )
)

# Define the server logic
server <- function(input, output) {
  output$scatterPlot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      labs(title = paste("Scatter plot of", input$xvar, "vs", input$yvar))
  })
  
  output$dataTable <- renderDataTable({
    mtcars
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Mtcars Dashboard](https://cdn-images-1.medium.com/max/800/1*ALeP-f5DvEJk-RlEIaDCfA.png)

In this dashboard version:

-   We used `dashboardPage`, `dashboardHeader`, `dashboardSidebar`, and `dashboardBody` to create a structured layout.
-   The sidebar contains a menu for navigation.
-   The body is divided into two tabs: one for the scatter plot and one for exploring the data table.

## Creating Fluent UIs with `shiny.fluent`

`shiny.fluent` integrates Microsoft's Fluent UI into Shiny applications, providing a rich set of controls and styles. It is particularly useful for creating applications with a Microsoft Office-like feel.

Here's how you can use `shiny.fluent` to enhance the `mtcars` app:

``` r
library(shiny)
library(shiny.fluent)
library(ggplot2)

# Define the UI with shiny.fluent
ui <- fluentPage(
  Text(variant = "xxLarge", content = "Mtcars Dataset Explorer"),
  Stack(
    tokens = list(childrenGap = 10),
    Dropdown.shinyInput("xvar", label = "X-axis variable", 
                        options = lapply(names(mtcars), function(x) list(key = x, text = x)),
                        value = "mpg"),
    Dropdown.shinyInput("yvar", label = "Y-axis variable", 
                        options = lapply(names(mtcars), function(x) list(key = x, text = x)),
                        value = "hp"),
    plotOutput("scatterPlot")
  )
)

# Define the server logic
server <- function(input, output, session) {
  output$scatterPlot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      labs(title = paste("Scatter plot of", input$xvar, "vs", input$yvar))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Fluent UI Mtcars App](https://cdn-images-1.medium.com/max/800/1*sSlHdaFEreyUbbXnGmlq6w.png)

In this example:

-   `Dropdown.shinyInput` is used to create dropdowns for the x-axis and y-axis variables.
-   The `Dropdown` component's `options` argument is correctly set up with `key` and `text` fields.
-   `plotOutput` is used to display the scatter plot.
-   The server logic captures the input selections and updates the plot accordingly.

## Accessibility and Usability Tips

Ensuring that your applications are accessible and user-friendly is crucial. Here are some tips:

-   **Use `shiny.i18n` for Internationalization**: `shiny.i18n` makes it easy to translate your Shiny apps into multiple languages, ensuring they are accessible to a broader audience.
-   **Consistent Styling**: Maintain consistent styles across your application for a professional look and feel.
-   **Responsive Design**: Ensure your app works well on different devices and screen sizes.

By leveraging these Appsilon packages, you can create visually appealing, user-friendly, and highly interactive Shiny applications. In the next chapter, we will delve into advanced reactivity and routing, further enhancing the interactivity and user experience of your applications.

## Advanced Reactivity and Routing

With a solid understanding of Shiny's core capabilities and how to enhance the UI using Appsilon's styling packages, it's time to delve into more advanced features. This chapter focuses on leveraging advanced reactivity with `shiny.react` and implementing efficient navigation using `shiny.router`. These tools will help you create more dynamic, responsive, and user-friendly applications.

## Advanced Reactivity with `shiny.react`

`shiny.react` is a package that brings the power of React.js, a popular JavaScript library for building user interfaces, into Shiny. By using `shiny.react`, you can create highly responsive and interactive components that enhance the user experience.

Let's enhance our previous `mtcars` app with `shiny.react` to add more responsive components:

``` r
library(shiny)
library(shiny.react)
library(shiny.fluent)
library(ggplot2)

# Define the UI with shiny.react and shiny.fluent
ui <- fluentPage(
  Text(variant = "xxLarge", content = "Mtcars Dataset Explorer"),
  Stack(
    tokens = list(childrenGap = 10),
    Dropdown.shinyInput("xvar", label = "X-axis variable", 
                        options = lapply(names(mtcars), function(x) list(key = x, text = x)),
                        value = "mpg"),
    Dropdown.shinyInput("yvar", label = "Y-axis variable", 
                        options = lapply(names(mtcars), function(x) list(key = x, text = x)),
                        value = "hp"),
    plotOutput("scatterPlot")
  )
)

# Define the server logic
server <- function(input, output, session) {
  output$scatterPlot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      labs(title = paste("Scatter plot of", input$xvar, "vs", input$yvar))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

In this code:

-   `Dropdown.shinyInput` is used to create dropdown inputs, integrating Fluent UI with Shiny reactivity.
-   The `Dropdown` component's `options` argument is correctly set up with `key` and `text` fields.
-   The `fluentPage` function is used to structure the UI.

## Implementing Routing with `shiny.router`

As your Shiny applications grow in complexity, managing navigation and routing becomes crucial. `shiny.router` is a package that provides a simple way to add routing to your Shiny apps, allowing you to create single-page applications (SPAs) with multiple views.

## Integrating Data Science and Visualization

With the basics of Shiny and enhanced UI elements covered, it's time to delve into the core functionality that makes Shiny a powerful tool for data science and visualization. In this chapter, we will explore how to handle data within Shiny applications, create dynamic reports, and integrate advanced visualization libraries to provide insightful and interactive data presentations.

## Data Handling in Shiny

Efficient data handling is crucial for any Shiny application, especially when dealing with large datasets or complex analyses. Shiny provides several mechanisms to manage data effectively, including reactive expressions and data caching.

## Reactive Data Handling

Reactivity is at the heart of Shiny, allowing applications to respond to user inputs dynamically. Here's an example of how to use reactive expressions to handle data in Shiny:

``` r
library(shiny)
library(ggplot2)

# Define UI
ui <- fluidPage(
  titlePanel("Reactive Data Example"),
  sidebarLayout(
    sidebarPanel(
      numericInput("obs", "Number of observations:", 1000, min = 1, max = 10000)
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  # Reactive expression to generate random data
  data <- reactive({
    rnorm(input$obs)
  })
  
  # Render plot
  output$distPlot <- renderPlot({
    ggplot(data.frame(x = data()), aes(x)) +
      geom_histogram(binwidth = 0.2) +
      labs(title = "Histogram of Randomly Generated Data")
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Reactive Data Example](https://cdn-images-1.medium.com/max/800/1*JA-pjlbo4Nii0zoTMVo_oA.png)

In this example:

-   A `numericInput` allows the user to specify the number of observations.
-   A reactive expression `data()` generates random data based on the user input.
-   The `renderPlot` function uses this reactive data to generate and display a histogram.

## Dynamic Reporting with Shiny

Shiny can be combined with `rmarkdown` and `knitr` to create dynamic reports that update based on user inputs. This is particularly useful for generating customized reports on the fly.

Here's an example of a simple Shiny app that generates a report using `rmarkdown`:

``` r
library(shiny)
library(rmarkdown)

# Define UI
ui <- fluidPage(
  titlePanel("Dynamic Report Example"),
  sidebarLayout(
    sidebarPanel(
      numericInput("obs", "Number of observations:", 1000, min = 1, max = 10000),
      downloadButton("report", "Generate Report")
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  # Reactive expression to generate random data
  data <- reactive({
    rnorm(input$obs)
  })
  
  # Render plot
  output$distPlot <- renderPlot({
    ggplot(data.frame(x = data()), aes(x)) +
      geom_histogram(binwidth = 0.2) +
      labs(title = "Histogram of Randomly Generated Data")
  })
  
  # Generate report
  output$report <- downloadHandler(
    filename = function() {
      paste("report-", Sys.Date(), ".html", sep = "")
    },
    content = function(file) {
      tempReport <- file.path(tempdir(), "report.Rmd")
      file.copy("report.Rmd", tempReport, overwrite = TRUE)
      
      params <- list(obs = input$obs)
      
      rmarkdown::render(tempReport, output_file = file,
                        params = params,
                        envir = new.env(parent = globalenv()))
    }
  )
}

# Run the application
shinyApp(ui = ui, server = server)
```

![Dynamic Report Example](https://cdn-images-1.medium.com/max/800/1*YdcOe-5KzdjVktQU2ZIo2g.png)

For this example to work, you'll need a `report.Rmd` file in your working directory with the following content:

```` markdown

---
title: "Dynamic Report"
output: html_document
params:
  obs: 1
---


```r
knitr::opts_chunk$set(echo = TRUE)
```

## Report
This report was generated dynamically using rmarkdown.

The number of observations selected was `r params$obs`.

```r
data <- rnorm(params$obs)
hist(data, main = "Histogram of Randomly Generated Data")
```
````

## Enhancing Shiny with Appsilon's Extensions

Enhancing your Shiny applications with Appsilon's powerful extensions can significantly improve functionality, usability, and visual appeal. This chapter provides an overview of key Appsilon packages, such as `shiny.semantic`, `shiny.fluent`, `semantic.dashboard`, `shiny.i18n`, `shiny.router`, and `shiny.react`.

## Key Extensions

shiny.semantic:

-   Integrates Semantic UI for modern, responsive designs.
-   Offers a wide range of UI components and theming options.

shiny.fluent:

-   Uses Microsoft's Fluent UI framework for styling.
-   Provides consistent and visually appealing UI elements.

semantic.dashboard:

-   Extends `shiny.semantic` to create sophisticated dashboards.
-   Includes pre-styled components for interactive and appealing dashboards.

shiny.i18n:

-   Facilitates internationalization and localization.
-   Enables translation of Shiny apps into multiple languages, improving accessibility.

shiny.router:

-   Implements routing for single-page applications.
-   Manages navigation and structure of large applications efficiently.

shiny.react:

-   Integrates React.js components into Shiny.
-   Enhances interactivity and responsiveness of Shiny applications.

## Summary of Examples

-   **UI Enhancement with shiny.semantic and shiny.fluent**: Transforming basic Shiny apps into modern, responsive applications using Semantic UI and Fluent UI frameworks.
-   **Creating Dashboards with semantic.dashboard**: Building interactive and visually appealing dashboards using pre-styled components.
-   **Internationalization with shiny.i18n**: Translating Shiny applications to make them accessible to a global audience.
-   **Routing with shiny.router**: Adding navigation and structuring large applications as single-page apps.
-   **Advanced Reactivity with shiny.react**: Incorporating React.js for highly interactive and responsive UI components.

Using these Appsilon extensions, you can significantly enhance the capabilities of your Shiny applications. These tools enable you to create more robust, user-friendly, and visually appealing applications, tailored to meet the needs of diverse users and complex projects.

## Conclusion

In this article, we have explored how to harness the power of Shiny for building interactive web applications in R, leveraging advanced UI frameworks, modular development, and data visualization techniques. By integrating Appsilon's extensions, you can significantly enhance the functionality, usability, and visual appeal of your Shiny applications.

While this guide covers various aspects of Shiny development, it's important to note that deploying Shiny applications online is a crucial step that we haven't delved into in detail. As I'm not an expert in deployment, I recommend the following resources for learning how to deploy Shiny applications:

1.  [Getting Started with ShinyApps.io](https://shiny.posit.co/r/articles/share/shinyapps/)
2.  [Introduction to Shiny Server](https://shiny.posit.co/r/articles/share/shiny-server/)
3.  [R Shiny Docker: How To Run Shiny Apps in a Docker Container](https://www.appsilon.com/post/r-shiny-docker-getting-started)
4.  [The Ultimate Guide to Deploying a Shiny App on AWS](https://www.charlesbordet.com/en/guide-shiny-aws/)
5.  [How To Set Up Shiny Server on Ubuntu 20.04](https://www.digitalocean.com/community/tutorials/how-to-set-up-shiny-server-on-ubuntu-20-04)

By exploring these resources, you can learn how to make your Shiny applications accessible to users worldwide, ensuring they are robust, scalable, and secure.

Thank you for following along with chapters on mastering Shiny and its extensions. I hope you found the information valuable and that it helps you in your journey to creating powerful, interactive web applications with R.
