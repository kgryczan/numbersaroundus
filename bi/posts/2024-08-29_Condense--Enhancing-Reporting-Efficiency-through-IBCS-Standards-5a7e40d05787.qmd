---
title: "Condense: Enhancing Reporting Efficiency through IBCS Standards"
author: "Numbers around us"
date: "2024-08-29"
format: html
---

**Disclaimer:**\
While my work in this series draws inspiration from the IBCS® standards, I am not a certified IBCS® analyst or consultant. The visualizations and interpretations presented here are my personal attempts to apply these principles and may not fully align with the official IBCS® standards. I greatly appreciate the insights and framework provided by IBCS® and aim to explore and learn from their approach through my own lens.

![Condense Image](images/condense.jpg)

In today's data-driven world, the ability to present information clearly and efficiently is essential across various fields, from business to academia. As the volume of data continues to grow, the importance of well-structured and easily interpretable reports becomes increasingly critical. This series on adapting the International Business Communication Standards (IBCS) aims to help you enhance your reporting practices to meet these evolving demands.

In previous chapters, we explored the overarching principles of IBCS and their relevance to effective communication. We introduced the "SUCCESS" framework, which stands for:

- **Say**: Convey a clear message
- **Unify**: Ensure consistency across reports
- **Condense**: Maximize information density
- **Check**: Verify accuracy and completeness
- **Express**: Use the most appropriate visualization
- **Simplify**: Remove unnecessary complexity
- **Structure**: Organize content logically

Today, we focus on the first "C" of the SUCCESS framework: **Condense**. Condensing information is crucial for creating reports that are both comprehensive and concise. This principle encourages the use of smaller components, maximization of available space, addition of data points and dimensions, incorporation of overlay and multi-tier charts, and the strategic placement of related objects.

The essence of condensing is to ensure that every element in your report serves a purpose and that the report as a whole communicates the maximum amount of relevant information in the minimum amount of space. By doing so, you enhance the readability and usability of your reports, enabling quicker and more effective decision-making.

In this chapter, we will explore various techniques for implementing the condense principle, backed by practical examples and code snippets in R. We will demonstrate how to adjust font sizes, optimize space, add layers of data, create advanced chart types, and integrate visual elements into text pages. These methods will help you transform your reports into powerful tools for communication and analysis.

Join us as we uncover the strategies and best practices for condensing information, making your reports not just visually appealing, but also highly functional and insightful.

## Using Small Components

Condensing information effectively begins with the strategic use of small components. This involves utilizing smaller fonts, objects, and elements to maximize the amount of information presented without overwhelming the viewer. By carefully considering the size and placement of each component, you can create reports that are both dense with information and easy to read.

### The Significance of Small Components in Reports

Using small components in reports helps in several ways:

1. **Enhanced Readability**: Smaller fonts and elements reduce clutter, making the report easier to navigate.
2. **More Information**: With smaller components, you can include more data points and dimensions without expanding the size of the report.
3. **Focus**: Compact elements help direct the reader's attention to the most important information.
4. **Professional Aesthetics**: A well-condensed report looks more professional and is more likely to engage the audience.

### Examples of Effective Use of Small Components

1. **Fonts**: Using a smaller, legible font for less critical information, such as footnotes or data labels, allows the main content to stand out.
2. **Icons and Symbols**: Small icons can replace text to convey information more succinctly.
3. **Charts and Graphs**: Compact charts can be used to present data without taking up too much space, allowing for multiple charts to be included on a single page.

### Implementation in R

Let's explore how to adjust font sizes and element dimensions in R using the `ggplot2` package. We'll ensure the plot remains compact by fixing its size.

```r
# Load necessary libraries
library(ggplot2)

# Sample data
data <- data.frame(
  category = c("A", "B", "C", "D"),
  value = c(23, 45, 56, 78)
)

# Create a compact bar plot with fixed size
p <- ggplot(data, aes(x = category, y = value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal(base_size = 10) +  # Set a smaller base font size
  theme(
    axis.title = element_text(size = 8),  # Smaller axis titles
    axis.text = element_text(size = 6),   # Smaller axis text
    plot.title = element_text(size = 12)  # Slightly larger plot title for emphasis
  ) +
  labs(
    title = "Compact Bar Plot",
    x = "Category",
    y = "Value"
  ) +
  theme(
    plot.margin = unit(c(1, 1, 1, 1), "cm")  # Minimize plot margins
  )

# Fix plot size using ggsave
ggsave("compact_bar_plot.png", plot = p, width = 4, height = 3, dpi = 300)

# Display the plot in RStudio
print(p)
```

![Compact Bar Plot](https://cdn-images-1.medium.com/max/800/1*UPu73XXzzQlPUCD6lJsRPg.png)

In this example:

- The `base_size` parameter in `theme_minimal` sets a smaller base font size for the entire plot.
- The `element_text` function is used to adjust the size of specific text elements, such as axis titles and axis text.
- The plot title is set to a slightly larger size to ensure it stands out.
- The `plot.margin` function is used to minimize the margins around the plot.
- The `ggsave` function is used to fix the plot size, ensuring it remains compact regardless of the display environment. The plot is saved as a PNG file with a width of 4 inches and a height of 3 inches at 300 dpi, maintaining its compactness.

By fixing the size of the plot and adjusting the font sizes and dimensions, we create a plot that is informative and easy to read, without taking up unnecessary space. This technique can be applied to various elements in your reports to achieve a condensed and professional look.

Using small components is just the first step in mastering the art of condensing information. In the next section, we will explore techniques for maximizing the use of space in your reports, further enhancing their efficiency and impact.

## Maximizing Use of Space

In addition to using small components, maximizing the use of space is crucial for creating concise and efficient reports. This involves minimizing margins, reducing empty areas, and carefully arranging elements to ensure that every part of the report serves a purpose. By doing so, you can present more information without overwhelming the reader.

### Techniques for Maximizing Space

1. **Minimizing Margins**: Reducing the margins around charts and plots can free up space for additional data or visual elements.
2. **Compact Layouts**: Using a grid or a small multiple layout to display related charts together can save space and enhance the comparative analysis.
3. **Overlapping Elements**: Carefully overlapping or layering elements such as charts and text can convey more information within the same area.
4. **Efficient Use of White Space**: While white space is important for readability, its efficient use ensures that it does not lead to unnecessary gaps in the report.

### Benefits of Maximizing Space

- **Improved Data Density**: More information can be presented in a given area, making the report more informative.
- **Enhanced Comparisons**: Compact layouts allow for easier comparison of related data points or trends.
- **Professional Appearance**: A well-organized, space-efficient report looks more polished and professional.

### Implementation in R

Let's explore how to maximize the use of space in R using the `ggplot2` and `patchwork` packages. We'll demonstrate how to reduce margins and arrange multiple plots in a compact layout.

```r
# Load necessary libraries
library(ggplot2)
library(patchwork)

# Sample data
data <- data.frame(
  category = c("A", "B", "C", "D"),
  value1 = c(23, 45, 56, 78),
  value2 = c(32, 54, 67, 89),
  value3 = c(20, 40, 60, 80)
)

# Create three compact bar plots
p1 <- ggplot(data, aes(x = category, y = value1)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_text(size = 8),
    axis.text = element_text(size = 6),
    plot.title = element_text(size = 12),
    plot.margin = margin(5, 5, 5, 5)  # Minimize plot margins
  ) +
  labs(
    title = "Plot 1",
    x = "Category",
    y = "Value 1"
  )

p2 <- ggplot(data, aes(x = category, y = value2)) +
  geom_bar(stat = "identity", fill = "darkorange") +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_text(size = 8),
    axis.text = element_text(size = 6),
    plot.title = element_text(size = 12),
    plot.margin = margin(5, 5, 5, 5)  # Minimize plot margins
  ) +
  labs(
    title = "Plot 2",
    x = "Category",
    y = "Value 2"
  )

p3 <- ggplot(data, aes(x = category, y = value3)) +
  geom_bar(stat = "identity", fill = "forestgreen") +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_text(size = 8),
    axis.text = element_text(size = 6),
    plot.title = element_text(size = 12),
    plot.margin = margin(5, 5, 5, 5)  # Minimize plot margins
  ) +
  labs(
    title = "Plot 3",
    x = "Category",
    y = "Value 3"
  )

# Arrange plots in a compact layout using patchwork
combined_plot <- (p1 / p2) | p3 +
  plot_annotation(
    title = "Compact Layout of Multiple Plots",
    theme = theme(plot.title = element_text(size = 14))
  )

# Display the combined plot
print(combined_plot)

# Save the compact layout as an image
ggsave("compact_layout.png", combined_plot, width = 8, height = 6, dpi = 300)
```

![Compact Layout](https://cdn-images-1.medium.com/max/800/1*p88QbFn6SVv6g3d7RlpwnA.png)

In this example:

- Three compact bar plots (`p1`, `p2`, and `p3`) are created using `ggplot2`.
- Margins around the plots are minimized using the `plot.margin` function.
- The plots are arranged in a compact layout using the `patchwork` package. Here, `p1` and `p2` are stacked vertically, and `p3` is placed next to them.
- The `plot_annotation` function from `patchwork` is used to add a title to the combined layout.
- The `ggsave` function is used to save the compact layout as an image, ensuring the size remains fixed and space-efficient.

By reducing margins and arranging multiple plots in a compact layout, we can present more information within the same area. This technique is useful for creating reports that are both informative and easy to read, without taking up unnecessary space.

Maximizing the use of space is a key aspect of condensing information. In the next section, we will explore how to add data points and dimensions to your reports, further enriching the information presented and enhancing the depth of analysis.

## Adding Data Points and Dimensions

Enriching reports with additional data points and dimensions enhances the depth of analysis and provides a more comprehensive view of the data. This involves incorporating more variables, adding multiple layers to visualizations, and presenting data in a way that allows for detailed comparisons and insights.

### The Value of Adding Data Points and Dimensions

1. **Detailed Analysis**: More data points and dimensions enable a deeper dive into the data, revealing patterns and trends that may not be apparent with a simpler view.
2. **Enhanced Comparisons**: Including additional variables allows for a better comparison of different aspects of the data.
3. **Rich Storytelling**: Multiple layers and dimensions help in telling a more nuanced story, making the report more informative and engaging.

### Examples of Multi-Dimensional Data Representation

1. **Multi-layered Plots**: Using multiple layers in a single plot to display different data points or variables.
2. **Faceted Plots**: Creating small multiples or facets to show different subsets of the data side by side.
3. **Overlay Charts**: Combining different chart types (e.g., bar and line charts) in a single visualization to present complementary information.

### Implementation in R

Let's explore how to add data points and dimensions to visualizations in R using the `ggplot2` package. We'll demonstrate how to create multi-layered and faceted plots to enrich the data representation.

```r
# Load necessary libraries
library(ggplot2)

# Sample data
data <- data.frame(
  category = c("A", "B", "C", "D"),
  value1 = c(23, 45, 56, 78),
  value2 = c(32, 54, 67, 89),
  value3 = c(20, 40, 60, 80)
)

# Create a multi-layered plot
multi_layered_plot <- ggplot(data, aes(x = category)) +
  geom_bar(aes(y = value1), stat = "identity", fill = "steelblue", alpha = 0.7) +
  geom_line(aes(y = value2, group = 1), color = "darkorange", size = 1) +
  geom_point(aes(y = value2), color = "darkorange", size = 3) +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_text(size = 8),
    axis.text = element_text(size = 6),
    plot.title = element_text(size = 12),
    plot.margin = margin(5, 5, 5, 5)  # Minimize plot margins
  ) +
  labs(
    title = "Multi-layered Plot",
    x = "Category",
    y = "Values"
  )

# Create a faceted plot
data_long <- data %>%
  pivot_longer(cols = starts_with("value"), names_to = "variable", values_to = "value")

faceted_plot <- ggplot(data_long, aes(x = category, y = value, fill = variable)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ variable, scales = "free_y") +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_text(size = 8),
    axis.text = element_text(size = 6),
    plot.title = element_text(size = 12),
    strip.text = element_text(size = 10),
    plot.margin = margin(5, 5, 5, 5),  # Minimize plot margins
    legend.position = "none"
  ) +
  labs(
    title = "Faceted Plot",
    x = "Category",
    y = "Value"
  )

# Display the plots side by side using patchwork
combined_plot <- multi_layered_plot / faceted_plot + 
  plot_annotation(
    title = "Multi-dimensional Data Representation",
    theme = theme(plot.title = element_text(size = 14))
  )

# Display the combined plot
print(combined_plot)

# Save the combined plot as an image
ggsave("multi_dimensional_plot.png", combined_plot, width = 8, height = 6, dpi = 300)
```

![Multi-dimensional Plot](https://cdn-images-1.medium.com/max/800/1*pD5XfGCXehqBF5mxTLQ6cw.png)

In this example:

- A multi-layered plot combines a bar chart and a line chart with points to show different data points on the same graph. This allows for a detailed comparison of `value1` and `value2` across categories.
- A faceted plot uses the `facet_wrap` function to create small multiples, displaying each variable (`value1`, `value2`, and `value3`) in separate panels. This facilitates easy comparison across different variables while maintaining a consistent layout.
- The `patchwork` package is used to arrange the multi-layered plot and the faceted plot in a compact layout, enhancing the overall presentation.
- The `ggsave` function saves the combined plot as an image, ensuring it retains its fixed size and detailed information.

Adding data points and dimensions enriches your visualizations, making them more informative and insightful. In the next section, we will explore how to incorporate advanced elements like overlay charts, multi-tier charts, and embedded explanations to further enhance the depth and clarity of your reports.

## Adding Elements to Charts

Enhancing data visualizations often requires incorporating advanced charting techniques that can convey more information in a compact and insightful manner. By adding elements such as overlay charts, multi-tier charts, and small multiples, you can present complex data more effectively. This section will explore how to create and combine these elements using R, specifically focusing on multi-tiered charts that present different dimensions of data side by side.

### Multi-Tier Charts

Multi-tier charts allow you to display multiple related datasets in a
single, cohesive visualization. This approach is particularly useful
when you want to compare different metrics across the same categories,
such as comparing revenue figures across months or years, along with the
differences between them.

Let's walk through an example using R's `ggplot2`{.markup--code
.markup--p-code}, `tidyverse`{.markup--code .markup--p-code}, and
`patchwork`{.markup--code .markup--p-code} packages to create a
multi-tiered chart that compares monthly revenues for two consecutive
years, highlights the absolute difference, and also shows the percentage
change.

#### Implementation in R {#e0d5 .graf .graf--h4 .graf-after--p name="e0d5"}

Here's how you can create a multi-tier chart that integrates different
data elements into a single, easy-to-read visualization:

``` {#0079 .graf .graf--pre .graf-after--p .graf--preV2 code-block-mode="1" spellcheck="false" code-block-lang="scss"}
# Load necessary libraries
library(ggplot2)
library(tidyverse)
library(patchwork)

# Sample data: monthly revenue for two consecutive years
data3 <- tibble(
  month = factor(
    month.name,
    levels = c(
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"
    ),
    ordered = TRUE
  ),
  rev_2022 = round(runif(12, min = 2000, max = 5000)),
  rev_2023 = round(runif(12, min = 2000, max = 5000))
) %>%
  mutate(
    diff = rev_2023 - rev_2022,
    diff_perc = (rev_2023 - rev_2022) / rev_2022
  )

# First plot: Comparing revenue for 2022 and 2023
plot1 <- ggplot(data3, aes(x = fct_rev(month), y = rev_2022)) +
  geom_col(width = 0.3) +
  geom_col(
    data = data3,
    aes(x = month, y = rev_2023),
    position = position_nudge(x = 0.1),
    width = 0.3, fill = "grey60"
  ) +
  geom_hline(yintercept = 0, linetype = "solid", color = "black") +
  coord_flip() +
  expand_limits(x = c(1, 10)) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title = element_blank()
  )

# Second plot: Absolute difference between 2022 and 2023 revenues
plot2 <- ggplot(data3, aes(x = fct_rev(month), y = diff)) +
  geom_col(aes(fill = ifelse(diff < 0, "red", "green3")), width = 0.12) +
  geom_point(aes(color = ifelse(diff < 0, "red", "green3")), size = 5) +
  geom_hline(yintercept = 0, linetype = "solid", color = "black") +
  coord_flip() +
  expand_limits(x = c(1, 10)) +
  scale_x_discrete() +
  scale_fill_identity() +
  scale_color_identity() +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title = element_blank(),
    axis.minor.ticks.length.x = element_blank()
  )

# Third plot: Percentage difference between 2022 and 2023 revenues
plot3 <- ggplot(data3, aes(x = fct_rev(month), y = diff_perc)) +
  geom_col(aes(fill = ifelse(diff < 0, "red", "green3")), width = 0.3) +
  geom_hline(yintercept = 0, linetype = "solid", color = "black") +
  coord_flip() +
  expand_limits(x = c(1, 10)) +
  scale_x_discrete() +
  scale_fill_identity() +
  scale_color_identity() +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title = element_blank(),
    axis.minor.ticks.length.x = element_blank()
  )

# Combine the three plots horizontally into a multi-tier chart
combined_plot <- plot1 + plot3 + plot2 + plot_layout(ncol = 3)

# Display the combined multi-tier chart
combined_plot
```

<figure id="9677" class="graf graf--figure graf-after--pre">
<img
src="https://cdn-images-1.medium.com/max/800/1*wWvowOJZeBdosVPcRkYMZw.png"
class="graf-image" data-image-id="1*wWvowOJZeBdosVPcRkYMZw.png"
data-width="1836" data-height="1038" />
</figure>

#### Explanation of the Code {#ee6f .graf .graf--h4 .graf-after--figure name="ee6f"}

1.  [**Data Preparation**: The dataset `data3`{.markup--code
    .markup--li-code} contains monthly revenue data for two years
    (`rev_2022`{.markup--code .markup--li-code} and
    `rev_2023`{.markup--code .markup--li-code}). We calculate the
    absolute difference (`diff`{.markup--code .markup--li-code}) and the
    percentage difference (`diff_perc`{.markup--code .markup--li-code})
    between the two years.]{#c0ca}
2.  [**Plot 1: Revenue Comparison**: This plot compares the revenue for
    2022 and 2023 side by side for each month. The
    `position_nudge`{.markup--code .markup--li-code} function is used to
    slightly shift the bars for 2023 to the right, making the comparison
    clearer.]{#4935}
3.  [**Plot 2: Absolute Difference**: This plot displays the absolute
    difference between the revenues of the two years. Positive
    differences are shown in green, while negative differences are shown
    in red.]{#c0f6}
4.  [**Plot 3: Percentage Difference**: The third plot illustrates the
    percentage change between the two years, again using green and red
    to indicate positive and negative changes, respectively.]{#5839}
5.  [**Combined Plot**: Using the `patchwork`{.markup--code
    .markup--li-code} package, the three plots are arranged side by side
    into a single multi-tier chart. This layout allows for a
    comprehensive comparison of the data across different
    dimensions.]{#06d5}

#### Benefits of Multi-Tier Charts {#8ad0 .graf .graf--h4 .graf-after--li name="8ad0"}

-   [**Comprehensive Comparison**: Multi-tier charts allow you to
    present multiple facets of the data side by side, making it easier
    for viewers to understand relationships and trends.]{#ed98}
-   [**Compact Information**: These charts are particularly useful when
    you need to present a lot of information in a compact format,
    without overwhelming the viewer.]{#ed76}
-   [**Enhanced Clarity**: By separating different metrics into
    individual tiers, you can maintain clarity while still showing the
    data in a unified, cohesive way.]{#574c}

By incorporating multi-tier charts into your reports, you can convey
complex information more effectively, providing your audience with a
deeper understanding of the data and its implications.

### Embedding Explanations

Embedding explanations within charts helps provide context and insights directly in the visualization. This can include annotations, text boxes, or tooltips that explain key points or trends. By embedding explanations, you ensure that the viewer understands the significance of the data without needing to refer to external sources.

#### Benefits of Embedding Explanations

1. **Enhanced Clarity**: Explanations within the chart make it easier for viewers to understand the data and the insights derived from it.
2. **Immediate Context**: Viewers can quickly grasp the key points and trends without needing to search for additional information.
3. **Professional Appearance**: Well-placed explanations can make the chart look more polished and thoughtfully designed.

#### Techniques for Embedding Explanations

1. **Annotations**: Adding text annotations directly on the chart to highlight important data points or trends.
2. **Text Boxes**: Using text boxes to provide more detailed explanations or commentary within the chart.
3. **Tooltips**: Implementing interactive tooltips that display additional information when the viewer hovers over a data point.

#### Implementation in R

Let's explore how to embed explanations using annotations and text boxes in `ggplot2`.

```r
# Load necessary libraries
library(ggplot2)

# Sample data
data <- data.frame(
  category = factor(c("Oct", "Nov", "Dec"), levels = c("Oct", "Nov", "Dec")),
  AC = c(453, 315, 292),
  PL = c(101, -73, 79)
)

# Create a bar plot with embedded explanations
explanation_plot <- ggplot(data, aes(x = category, y = AC)) +
  geom_bar(stat = "identity", fill = "darkgrey", width = 0.6) +
  geom_text(aes(label = AC), vjust = -0.5, size = 3) +
  geom_text(aes(x = "Nov", y = 370, label = "Significant drop in November"), vjust = -1.5, color = "red", size = 3.5) +
  geom_segment(aes(x = "Nov", xend = "Nov", y = 380, yend = 330), arrow = arrow(length = unit(0.2, "cm")), color = "red") +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_blank(),
    axis.text = element_text(size = 8),
    plot.title = element_text(size = 12),
    plot.margin = margin(5, 5, 5, 5)  # Minimize plot margins
  ) +
  labs(
    title = "AC with Embedded Explanations",
    x = "Category",
    y = "Value"
  )

# Display the plot
print(explanation_plot)
```

![Embedded Explanations](https://cdn-images-1.medium.com/max/800/1*aWV3Fb-RJbqEoxEEcTEddg.png)

In this example:

- The `geom_text` function is used to add text labels directly on the bars to display the `AC` values.
- Another `geom_text` is used to add an explanation above the "Nov" bar, indicating a significant drop.
- The `geom_segment` function draws an arrow from the explanation text to the "Nov" bar, highlighting the specific data point being explained.

By embedding explanations directly within the chart, you provide immediate context to the viewer, making the data more understandable and the insights more accessible.

### Incorporating Additional Objects

In addition to embedding explanations and creating multi-tier charts, incorporating additional objects such as small multiples, related charts, and chart-table combinations can further enhance the effectiveness of your reports. These techniques allow you to present data in various forms, making it easier for the viewer to understand complex information.

#### Small Multiples

Small multiples are a series of similar charts or graphs that use the same scale and axes, allowing for easy comparison across different categories or time periods. This technique is particularly useful for showing changes or trends across multiple dimensions.

#### Related Charts

Displaying related charts side by side helps in comparing different aspects of the data. For example, a bar chart showing sales figures next to a line chart depicting sales growth can provide a more comprehensive view of the data.

#### Chart-Table Combinations

Combining charts and tables in a single view can provide both visual and numerical representations of the data. This approach caters to different preferences and enhances the overall understanding of the data.

#### Implementation in R

Let's explore how to create small multiples, related charts, and chart-table combinations using the `ggplot2` and `patchwork` packages in R.

```r
# SMALL MULTIPLES

# Load necessary libraries
library(ggplot2)
library(patchwork)

# Sample data for small multiples
data_small <- data.frame(
  month = rep(c("Oct", "Nov", "Dec"), each = 3),
  city = rep(c("Berlin", "Paris", "NYC"), times = 3),
  value = c(300, 450, 200, 400, 600, 350, 500, 550, 400)
)

# Create small multiples
small_multiples <- ggplot(data_small, aes(x = city, y = value, fill = city)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ month) +
  theme_bw(base_size = 10) +
  theme(
    axis.title = element_blank(),
    plot.title = element_text(size = 12)
  ) +
  labs(title = "Small Multiples of Monthly Data")

# Display small multiples
print(small_multiples)
```

![Small Multiples](https://cdn-images-1.medium.com/max/800/1*s6PZHWtuDwikymSwGyq6uA.png)

```r
# RELATED CHARTS

# Sample data for related charts
data_related <- data.frame(
  category = factor(c("Oct", "Nov", "Dec"), levels = c("Oct", "Nov", "Dec")),
  sales = c(300, 450, 500),
  growth = c(10, 15, 20)
)

# Create a bar chart for sales
sales_chart <- ggplot(data_related, aes(x = category, y = sales)) +
  geom_bar(stat = "identity", fill = "steelblue", width = 0.6) +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_blank(),
    plot.title = element_text(size = 12)
  ) +
  labs(title = "Monthly Sales")

# Create a line chart for growth
growth_chart <- ggplot(data_related, aes(x = category, y = growth, group = 1)) +
  geom_line(color = "darkorange", size = 1) +
  geom_point(color = "darkorange", size = 3) +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_blank(),
    plot.title = element_text(size = 12)
  ) +
  labs(title = "Monthly Growth")

# Combine the related charts side by side
combined_related_charts <- sales_chart | growth_chart + plot_layout(ncol = 2, widths = c(2, 1))

# Display the combined related charts
print(combined_related_charts)
```

![Related Charts](https://cdn-images-1.medium.com/max/800/1*-Z8wNfv7w54-96GvV56v8A.png)

```r
# CHART-TABLE COMBINATION

library(gridExtra)

# Sample data for chart-table combination
data_table <- data.frame(
  month = c("Oct", "Nov", "Dec"),
  sales = c(300, 450, 500),
  growth = c(10, 15, 20)
)

# Create a bar chart for sales
sales_chart_table <- ggplot(data_table, aes(x = month, y = sales)) +
  geom_bar(stat = "identity", fill = "steelblue", width = 0.6) +
  theme_minimal(base_size = 10) +
  theme(
    axis.title = element_blank(),
    plot.title = element_text(size = 12)
  ) +
  labs(title = "Monthly Sales")

# Create a table for sales and growth
sales_table <- tableGrob(data_table, rows = NULL, theme = ttheme_default(base_size = 10))

# Combine the chart and table
combined_chart_table <- sales_chart_table + inset_element(sales_table, left = 0.6, bottom = 0.7, right = 1, top = 1)

# Display the combined chart and table
print(combined_chart_table)
```

![Chart-Table Combination](https://cdn-images-1.medium.com/max/800/1*0ga704Rl2oxvPAcf9JWJ3w.png)

In this example:

- **Small Multiples**: The `facet_wrap` function is used to create small multiples, displaying the same chart for different months side by side.
- **Related Charts**: Two different charts (bar chart for sales and line chart for growth) are created and combined horizontally using the `patchwork` package.
- **Chart-Table Combination**: A bar chart for sales is combined with a table displaying sales and growth figures, providing both visual and numerical representations.

By incorporating small multiples, related charts, and chart-table combinations, you can present data in a variety of forms, making it easier for viewers to understand complex information and draw meaningful insights. This enhances the overall effectiveness of your reports and ensures that they cater to different preferences and analytical needs.

### The Power of Condensed Information

The principles of condensed information, as guided by the International Business Communication Standards (IBCS), are not just theoretical concepts but powerful tools that have real-life applications in various industries. The essence of condensing information is to maximize the density of relevant data while maintaining clarity and readability, allowing decision-makers to grasp complex information quickly and accurately.

#### Real-Life Application: A Case Study in Financial Reporting

Consider the case of a multinational corporation that operates across various regions, each with its own set of financial metrics and performance indicators. The company's leadership team faced challenges in making timely, informed decisions due to the overwhelming amount of data presented in their regular reports. Each report was lengthy, filled with dense tables and verbose explanations, making it difficult to identify key trends and insights.

Recognizing the need for a more efficient approach, the company decided to adopt the IBCS standards, focusing on the "Condense" principle. Here's how they transformed their reporting process:

1. **Adopting Small Components**: The company reduced font sizes and minimized unnecessary graphical elements. Instead of large, complex charts, they used smaller, focused visualizations that highlighted the most critical data points. This allowed them to fit more relevant information on each page without overcrowding it.
2. **Maximizing Use of Space**: By eliminating excessive white space and strategically placing charts and tables, the company was able to create more comprehensive reports that still felt clean and easy to navigate. They implemented multi-tier charts and small multiples to compare regional performance metrics side by side, making it easier to spot outliers and trends.
3. **Adding Data Points and Dimensions**: The use of overlay charts and related visualizations enabled the leadership team to see not just the raw numbers, but also the context—such as year-over-year growth, percentage changes, and absolute differences. This multi-dimensional approach provided a richer, more nuanced understanding of the data.
4. **Embedding Explanations**: To avoid cluttering the reports with long paragraphs, the company embedded concise explanations directly within the charts. Annotations, small text boxes, and visual cues were used to highlight significant trends or deviations. This allowed the viewers to get context at a glance, reducing the need to cross-reference with other documents.
5. **Incorporating Additional Objects**: The company also made extensive use of chart-table combinations and related charts. For instance, they placed key performance indicators (KPIs) alongside detailed financial tables, allowing executives to quickly move from high-level summaries to granular data as needed.

#### The Impact of Condensed Information

The shift to condensed information following IBCS principles had a profound impact on the company's decision-making process. Reports that were once cumbersome and time-consuming to read became streamlined and efficient. Executives could now absorb critical insights in a fraction of the time it previously took, leading to faster and more informed decisions.

Moreover, the clarity and consistency of the new reporting format fostered greater confidence in the data. The standardized visual language meant that everyone, from regional managers to the board of directors, could interpret the reports in the same way, reducing miscommunication and aligning the organization's strategic direction.

#### Purpose and Benefits of Condensed Information

The real-life example of this multinational corporation underscores the fundamental purpose of condensing information: to make complex data more accessible and actionable. The ability to present detailed, multi-dimensional information in a clear and concise manner is essential in today's fast-paced business environment, where time is of the essence and the cost of misinterpretation can be high.

By adhering to IBCS standards, organizations can ensure that their reports are not only informative but also intuitive and easy to navigate. This approach to information design is about more than just aesthetics—it's about enhancing the effectiveness of communication, driving better decisions, and ultimately, achieving better business outcomes.

In a world where data overload is a common challenge, the principles of condensed information offer a practical solution. They enable us to cut through the noise, focus on what matters most, and present information in a way that empowers decision-makers to act swiftly and with confidence. This is the true power of condensing information: transforming data into insight, and insight into action.

### The Next Step in the SUCCESS Framework

As we continue our journey through the IBCS "SUCCESS" framework, the next chapter will delve into the second "C"—**Check**. We will explore the importance of verifying accuracy, completeness, and consistency in your reports, ensuring that the information you present is both reliable and trustworthy. Stay tuned as we uncover the best practices for validating your data and maintaining the highest standards of quality in your reporting.
